{"ast":null,"code":"class UploadService {\n  passportAnalysis(file) {\n    return new Promise(resolve => {\n      let formData = new FormData();\n      formData.append('imagefile', file);\n      fetch(\"http://localhost:5000/passport\", {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json()).then(data => {\n        resolve(data);\n      }, error => {\n        resolve({});\n      });\n    });\n  }\n\n  licenseAnalysis(file) {\n    return new Promise(resolve => {\n      let formData = new FormData();\n      formData.append('imagefile', file);\n      fetch(\"http://localhost:5000/drivers_license\", {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json()).then(data => {\n        resolve(data);\n      }, error => {\n        resolve(null);\n        /*\n        setTimeout(() => {\n            resolve({\n                \"CLASS\": \"CLASS: A\",\n                \"DD\": \"5 00:123567890123\",\n                \"DLN\": \"CDL\",\n                \"DOB\": \"D0B: 08/04/1975\",\n                \"DUPS\": \"DUPS: 00\",\n                \"EXP\": \"4B EXP: 08/05/2023\",\n                \"EYES\": \"8 EYES: BRO\",\n                \"HGT\": \"16 HGT: 5'-06\\\"\",\n                \"SEX\": \"5 SEX: F\",\n                \"personal_info\": [\n                    \"COMMERCIAL\",\n                    \"PENNSYLVANA\",\n                    \"DRIVER'S LICENSE\",\n                    \"YIST PI COM\",\n                    \"US4\",\n                    \"AD DLN: 99 999 999\",\n                    \"DUPS: 00\",\n                    \"D0B: 08/04/1975\",\n                    \"4B EXP: 08/05/2023\",\n                    \"4A|SS: 03/01/2019\",\n                    \"SAMPLE\",\n                    \"2 JANICE ANN\",\n                    \"8 123 MAIN STREET\",\n                    \"AARRISBURG, PA 17101-0000\",\n                    \"8 EYES: BRO\",\n                    \"5 SEX: F\",\n                    \"16 HGT: 5'-06\\\"\",\n                    \"CLASS: A\",\n                    \"9A ENND: NONE\",\n                    \"CDL\",\n                    \"A2RESTR: NONE\",\n                    \"DAMICE TJAMPLE\",\n                    \"5 00:123567890123\",\n                    \"456789012345\",\n                    \"ORGAN DONOR\"\n                ]\n               })\n        }, 1000)\n        */\n      });\n    });\n  }\n\n  ocrAnalysis(file) {\n    return new Promise(resolve => {\n      let formData = new FormData();\n      formData.append('imagefile', file);\n      fetch(\"http://localhost:5000/image\", {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json()).then(data => {\n        resolve(data);\n      }, error => {\n        resolve(null);\n      });\n    });\n  }\n\n  sentimentAnalysis(value) {\n    return new Promise(resolve => {\n      fetch(\"http://localhost:5000/nlp_sa\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          words: [value]\n        })\n      }).then(res => res.json()).then(data => {\n        console.log(data);\n        resolve({\n          scores: [data.scores[0][1][0]]\n        });\n      }, error => {\n        resolve(null);\n        console.log(error);\n      });\n    });\n  }\n\n  summaryAnalysis(value) {\n    return new Promise(resolve => {\n      fetch(\"http://localhost:5000/simple_summary\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: value\n        })\n      }).then(res => res.json()).then(data => {\n        resolve({\n          summary: data.summary_text || value\n        });\n      }, error => {\n        setTimeout(() => {\n          resolve({\n            \"summary\": value\n          });\n        }, 1000);\n      });\n    });\n  }\n\n}\n\nexport default UploadService;","map":{"version":3,"sources":["/Users/ttvalle/Documents/Prod_ocr-react-app/src/services/Upload.js"],"names":["UploadService","passportAnalysis","file","Promise","resolve","formData","FormData","append","fetch","method","body","then","res","json","data","error","licenseAnalysis","ocrAnalysis","sentimentAnalysis","value","headers","JSON","stringify","words","console","log","scores","summaryAnalysis","text","summary","summary_text","setTimeout"],"mappings":"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","sourcesContent":["\nclass UploadService {\n\n    passportAnalysis(file){\n\n        return new Promise((resolve) => {\n\n            let formData = new FormData();\n\n            formData.append('imagefile', file);\n\n            fetch(\"http://localhost:5000/passport\", \n                {\n                    method: 'POST',\n                    body: formData\n                })\n                .then(res => res.json())\n                .then(\n                    (data) => {        \n                        \n                        resolve(data)\n                    },\n                    (error) => {\n                        resolve({})\n                    }\n                )\n\n        })\n    }\n\n    licenseAnalysis(file){\n\n        return new Promise((resolve) => {\n\n            let formData = new FormData();\n\n            formData.append('imagefile', file);\n\n            fetch(\"http://localhost:5000/drivers_license\", \n                {\n                    method: 'POST',\n                    body: formData\n                })\n                .then(res => res.json())\n                .then(\n                    (data) => {        \n                        \n                        resolve(data)\n                    },\n                    (error) => {\n                        resolve(null);\n                        /*\n                        setTimeout(() => {\n                            resolve({\n                                \"CLASS\": \"CLASS: A\",\n                                \"DD\": \"5 00:123567890123\",\n                                \"DLN\": \"CDL\",\n                                \"DOB\": \"D0B: 08/04/1975\",\n                                \"DUPS\": \"DUPS: 00\",\n                                \"EXP\": \"4B EXP: 08/05/2023\",\n                                \"EYES\": \"8 EYES: BRO\",\n                                \"HGT\": \"16 HGT: 5'-06\\\"\",\n                                \"SEX\": \"5 SEX: F\",\n                                \"personal_info\": [\n                                    \"COMMERCIAL\",\n                                    \"PENNSYLVANA\",\n                                    \"DRIVER'S LICENSE\",\n                                    \"YIST PI COM\",\n                                    \"US4\",\n                                    \"AD DLN: 99 999 999\",\n                                    \"DUPS: 00\",\n                                    \"D0B: 08/04/1975\",\n                                    \"4B EXP: 08/05/2023\",\n                                    \"4A|SS: 03/01/2019\",\n                                    \"SAMPLE\",\n                                    \"2 JANICE ANN\",\n                                    \"8 123 MAIN STREET\",\n                                    \"AARRISBURG, PA 17101-0000\",\n                                    \"8 EYES: BRO\",\n                                    \"5 SEX: F\",\n                                    \"16 HGT: 5'-06\\\"\",\n                                    \"CLASS: A\",\n                                    \"9A ENND: NONE\",\n                                    \"CDL\",\n                                    \"A2RESTR: NONE\",\n                                    \"DAMICE TJAMPLE\",\n                                    \"5 00:123567890123\",\n                                    \"456789012345\",\n                                    \"ORGAN DONOR\"\n                                ]\n                               })\n                        }, 1000)\n                        */\n                    }\n                )\n\n        })\n    }\n\n    ocrAnalysis(file) {\n\n        return new Promise((resolve) => {\n\n            let formData = new FormData();\n\n            formData.append('imagefile', file);\n\n            fetch(\"http://localhost:5000/image\", \n                {\n                    method: 'POST',\n                    body: formData\n                })\n                .then(res => res.json())\n                .then(\n                    (data) => {        \n                        \n                        resolve(data)\n                    },\n                    (error) => {\n                        resolve(null)\n                    }\n                )\n\n        })\n    }\n\n    sentimentAnalysis(value) {\n\n        return new Promise((resolve) => {\n\n            fetch(\"http://localhost:5000/nlp_sa\", \n                {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({words: [value]})\n                })\n                .then(res => res.json())\n                .then(\n                    (data) => {        \n                        console.log(data);\n                        resolve({scores: [data.scores[0][1][0]]})\n                    },\n                    (error) => {\n\n                        resolve(null)\n                        console.log(error)\n                    }\n                )\n\n        })\n    }\n\n    summaryAnalysis(value) {\n\n        return new Promise((resolve) => {\n\n            fetch(\"http://localhost:5000/simple_summary\", \n                {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({text: value})\n                })\n                .then(res => res.json())\n                .then(\n                    (data) => {        \n                        \n                        resolve({summary: data.summary_text || value})\n                    },\n                    (error) => {\n\n                        setTimeout(() => {\n                            resolve({\"summary\": value})\n                        }, 1000)\n                        \n                    }\n                )\n\n        })\n    }\n}\n\nexport default UploadService;"]},"metadata":{},"sourceType":"module"}