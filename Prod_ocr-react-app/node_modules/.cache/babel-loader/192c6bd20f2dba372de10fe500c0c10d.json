{"ast":null,"code":"var _jsxFileName = \"/Users/micintro/Desktop/CI Challenge/CI_Challenge2_Image2Text_NLP/Final Product/Prod_ocr-react-app/src/pages/pdf-ocr/PdfOcr.js\";\nimport React from 'react';\nimport './PdfOcr.scss';\nimport UploadService from '../../services/Upload';\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf';\nimport FileInput from '../../views/file-input/FileInput';\nimport LoadingOverlay from '../../views/loading-overlay/LoadingOverlay';\nimport TextAnalysisOutput from '../../views/text-analysis-output/TextAnalysisOutput';\n\nclass PdfOcr extends React.Component {\n  constructor(props) {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = '/workers/pdf.worker.js';\n    super(props);\n    this.state = {\n      uploadService: new UploadService(),\n      pdfImages: null\n    };\n    this.fileChanged = this.fileChanged.bind(this);\n    this.resetPage = this.resetPage.bind(this);\n  }\n\n  resetPage() {\n    this.setState({\n      pdfImages: null\n    });\n  }\n\n  async fileChanged(file) {\n    this.setState({\n      loading: true\n    });\n    let pdfImages = await this.convertPdfToImages(file);\n\n    for (let pdfImage of pdfImages) {\n      let pdfText = await this.state.uploadService.ocrAnalysis(pdfImage.file);\n      let summaryRes = await this.state.uploadService.summaryAnalysis(pdfText);\n      let summarySentiment = await this.state.uploadService.sentimentAnalysis(summaryRes.summary);\n      pdfImage.textOutput = {\n        summary: {\n          text: summaryRes.summary,\n          sentiment: summarySentiment.scores[0]\n        },\n        original: {\n          text: pdfText\n        }\n      };\n    }\n\n    this.setState({\n      pdfImages: pdfImages,\n      loading: false\n    });\n  }\n\n  async getPage(pdf, pageNum) {\n    return new Promise(res => {\n      let canvas = document.createElement('canvas');\n      pdf.getPage(pageNum).then(page => {\n        let scale = 1.5;\n        let viewport = page.getViewport({\n          scale: scale\n        });\n        let context = canvas.getContext('2d');\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n        let renderContext = {\n          canvasContext: context,\n          viewport: viewport\n        };\n        let pageRendering = page.render(renderContext);\n        var completeCallback = pageRendering._internalRenderTask.callback;\n\n        pageRendering._internalRenderTask.callback = error => {\n          completeCallback.call(this, error);\n          let base64Img = canvas.toDataURL(\"image/jpeg\", 1);\n          res({\n            image: base64Img,\n            file: this.dataURItoBlob(base64Img),\n            text: null\n          });\n        };\n      });\n    });\n  }\n\n  async loadPdf(url) {\n    return new Promise(res => {\n      let loadingTask = pdfjsLib.getDocument(url);\n      loadingTask.promise.then(pdf => {\n        res(pdf);\n      });\n    });\n  }\n\n  async convertPdfToImages(file) {\n    let pageImages = [];\n    let pdf = await this.loadPdf(URL.createObjectURL(file));\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      pageImages.push(await this.getPage(pdf, i));\n    }\n\n    return new Promise(res => {\n      res(pageImages);\n    });\n  }\n\n  dataURItoBlob(dataURI) {\n    // convert base64/URLEncoded data component to raw binary data held in a string\n    let byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0) byteString = atob(dataURI.split(',')[1]);else byteString = unescape(dataURI.split(',')[1]); // separate out the mime component\n\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to a typed array\n\n    var ia = new Uint8Array(byteString.length);\n\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([ia], {\n      type: mimeString\n    });\n  }\n\n  generatePdfHtml() {\n    if (this.state.pdfImages) {\n      let response = [];\n\n      for (let pdfImage of this.state.pdfImages) {\n        response.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"file-output-state-content-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ocr-image-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ocr-image-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"ocr-image\",\n          src: pdfImage.image,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 33\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"ocr-text-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TextAnalysisOutput, {\n          output: pdfImage.textOutput,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }\n        })))));\n      }\n\n      return response;\n    }\n\n    return '';\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pdf-ocr-page-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: ['pdf-file-input-container', this.state.pdfImages ? 'hide' : ''].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FileInput, {\n      fileChangedCallback: this.fileChanged,\n      accept: \"application/pdf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, \"Click or Drag to Upload \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 120\n      }\n    }), \" a PDF File\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ['pdf-loading-overlay-container', !this.state.loading ? 'hide' : ''].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(LoadingOverlay, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: ['file-output-state-container', !this.state.pdfImages ? 'hide' : ''].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.resetPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, \"Upload New File\"), this.generatePdfHtml()));\n  }\n\n}\n\nexport default PdfOcr;","map":{"version":3,"sources":["/Users/micintro/Desktop/CI Challenge/CI_Challenge2_Image2Text_NLP/Final Product/Prod_ocr-react-app/src/pages/pdf-ocr/PdfOcr.js"],"names":["React","UploadService","pdfjsLib","FileInput","LoadingOverlay","TextAnalysisOutput","PdfOcr","Component","constructor","props","GlobalWorkerOptions","workerSrc","state","uploadService","pdfImages","fileChanged","bind","resetPage","setState","file","loading","convertPdfToImages","pdfImage","pdfText","ocrAnalysis","summaryRes","summaryAnalysis","summarySentiment","sentimentAnalysis","summary","textOutput","text","sentiment","scores","original","getPage","pdf","pageNum","Promise","res","canvas","document","createElement","then","page","scale","viewport","getViewport","context","getContext","height","width","renderContext","canvasContext","pageRendering","render","completeCallback","_internalRenderTask","callback","error","call","base64Img","toDataURL","image","dataURItoBlob","loadPdf","url","loadingTask","getDocument","promise","pageImages","URL","createObjectURL","i","numPages","push","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","charCodeAt","Blob","type","generatePdfHtml","response","console","log","join"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './PdfOcr.scss';\nimport UploadService from '../../services/Upload';\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf';\nimport FileInput from '../../views/file-input/FileInput';\nimport LoadingOverlay from '../../views/loading-overlay/LoadingOverlay';\nimport TextAnalysisOutput from '../../views/text-analysis-output/TextAnalysisOutput';\n\nclass PdfOcr extends React.Component {\n \n    constructor(props) {\n\n        pdfjsLib.GlobalWorkerOptions.workerSrc = '/workers/pdf.worker.js';\n\n        super(props);\n        \n        this.state = {\n            uploadService: new UploadService(),\n            pdfImages: null\n        }\n        \n        this.fileChanged = this.fileChanged.bind(this);\n        this.resetPage = this.resetPage.bind(this);\n    }\n\n    resetPage() {\n\n        this.setState({\n            pdfImages: null\n        })\n    }\n\n    async fileChanged(file) {\n\n        this.setState({\n            loading: true\n        })\n\n        let pdfImages = await this.convertPdfToImages(file);\n\n        for(let pdfImage of pdfImages) {\n\n            let pdfText = await this.state.uploadService.ocrAnalysis(pdfImage.file);\n\n            let summaryRes = await this.state.uploadService.summaryAnalysis(pdfText);\n            let summarySentiment = await this.state.uploadService.sentimentAnalysis(summaryRes.summary);\n\n            pdfImage.textOutput = {\n                summary: {\n                    text: summaryRes.summary,\n                    sentiment: summarySentiment.scores[0]\n                },\n                original: {\n                    text: pdfText\n                }\n            };\n        }\n\n        this.setState({\n            pdfImages: pdfImages,\n            loading: false\n        })\n    }\n\n    async getPage(pdf, pageNum) {\n\n        return new Promise(res => {\n\n            let canvas = document.createElement('canvas');\n\n            pdf.getPage(pageNum).then((page) => {\n\n                let scale = 1.5;\n                let viewport = page.getViewport({ scale: scale });\n\n                let context = canvas.getContext('2d');\n                canvas.height = viewport.height;\n                canvas.width = viewport.width;\n\n                let renderContext = {\n                    canvasContext: context,\n                    viewport: viewport,\n                };\n\n                let pageRendering = page.render(renderContext);\n\n                var completeCallback = pageRendering._internalRenderTask.callback;\n\n                pageRendering._internalRenderTask.callback = (error) => {\n\n                    completeCallback.call(this, error);\n\n                    let base64Img = canvas.toDataURL(\"image/jpeg\", 1);\n\n                    res({image: base64Img, file: this.dataURItoBlob(base64Img), text: null});\n                };\n\n            });\n        });\n    }\n\n    async loadPdf(url) {\n\n        return new Promise(res => {\n\n            let loadingTask = pdfjsLib.getDocument(url);\n\n            loadingTask.promise.then((pdf) => {\n    \n                res(pdf)\n            });\n        });\n    }\n\n    async convertPdfToImages(file) {\n        \n        let pageImages = [];\n\n        let pdf = await this.loadPdf(URL.createObjectURL(file))\n\n        for(let i = 1; i <= pdf.numPages; i++) {\n\n            pageImages.push(await this.getPage(pdf, i));\n        }\n\n        return new Promise(res => {\n\n            res(pageImages)\n        });\n    }\n\n    dataURItoBlob(dataURI) {\n        // convert base64/URLEncoded data component to raw binary data held in a string\n        let byteString;\n        if (dataURI.split(',')[0].indexOf('base64') >= 0)\n            byteString = atob(dataURI.split(',')[1]);\n        else\n            byteString = unescape(dataURI.split(',')[1]);\n        // separate out the mime component\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n        // write the bytes of the string to a typed array\n        var ia = new Uint8Array(byteString.length);\n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n        return new Blob([ia], {type:mimeString});\n    }\n\n    generatePdfHtml() {\n\n        if(this.state.pdfImages) {\n\n            let response = [];\n\n            for(let pdfImage of this.state.pdfImages) {\n\n                response.push(\n\n                    <div className=\"file-output-state-content-container\">\n\n                        <div className=\"ocr-image-container\">\n\n                            <div className=\"ocr-image-wrapper\">\n                                <img className=\"ocr-image\" src={pdfImage.image} />\n                            </div>\n\n                            <div class=\"ocr-text-container\">\n                                <TextAnalysisOutput output={pdfImage.textOutput} />\n                            </div>\n                        </div>\n                        \n                    </div>\n\n                )\n            }\n\n            return response;\n        }\n\n        return '';\n    }\n\n    render() { \n\n        console.log(this.state);\n\n        return (\n\n            <div className=\"pdf-ocr-page-container\">\n\n                <div className={['pdf-file-input-container', this.state.pdfImages ? 'hide' : ''].join(' ')}>\n\n                    <FileInput fileChangedCallback={this.fileChanged} accept=\"application/pdf\">Click or Drag to Upload <br /> a PDF File</FileInput> \n\n                    <div className={['pdf-loading-overlay-container', !this.state.loading ? 'hide' : ''].join(' ')}>\n                        <LoadingOverlay />\n                    </div>\n                </div>\n\n                <div className={['file-output-state-container', !this.state.pdfImages ? 'hide' : ''].join(' ')}>\n\n                    <button onClick={this.resetPage}>Upload New File</button>\n\n                    {this.generatePdfHtml()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PdfOcr;"]},"metadata":{},"sourceType":"module"}